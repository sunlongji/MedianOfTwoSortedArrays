public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] A=nums1, B=nums2;
        int n=A.length;
        int m=B.length;
        if(n>m)   return findMedianSortedArrays(B,A);
        
        int k=(n+m-1)/2;
        int l=0, r=Math.min(k,n);
        // after binary search, we almost get the median because it must be between
        // these 4 numbers: A[l-1], A[l], B[k-l], and B[k-l+1] 
        while(l<r){
            int midA=(l+r)/2;
            int midB=k-midA;
            if(A[midA]<B[midB])
                l=midA+1;
            else
                r=midA;
        }
        int a=Math.max(l>0?A[l-1]:Integer.MIN_VALUE,k-l>=0?B[k-l]:Integer.MIN_VALUE);
        if(((n+m)&1)==1)    return (double) a;
        int b=Math.min(l<n?A[l]:Integer.MAX_VALUE,k-l+1<m?B[k-l+1]:Integer.MAX_VALUE);
        return a/2.0+b/2.0;
    }
}
